[{"title":"SignalUtil","type":0,"sectionRef":"#","url":"/RailUtil/api/SignalUtil","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"SignalUtil","url":"/RailUtil/api/SignalUtil#functions","content":" "},{"title":"combine​","type":1,"pageTitle":"SignalUtil","url":"/RailUtil/api/SignalUtil#combine","content":"&lt;/&gt; SignalUtil.combine(signalTbl: Thetableofsignalstocombine.) → ASignalProxyobjectthatactsasaproxyforthesignals. Combines a bunch of signals into one signal. "},{"title":"DebugUtil","type":0,"sectionRef":"#","url":"/RailUtil/api/DebugUtil","content":"On this page DebugUtil DebugUtil is a collection of functions that help with debugging.","keywords":""},{"title":"RailUtil","type":0,"sectionRef":"#","url":"/RailUtil/api/RailUtil","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"RailUtil","url":"/RailUtil/api/RailUtil#properties","content":" "},{"title":"Math​","type":1,"pageTitle":"RailUtil","url":"/RailUtil/api/RailUtil#Math","content":"&lt;/&gt; RailUtil.Math: MathUtil The MathUtil module.  "},{"title":"Vector​","type":1,"pageTitle":"RailUtil","url":"/RailUtil/api/RailUtil#Vector","content":"&lt;/&gt; RailUtil.Vector: VectorUtil The VectorUtil module.  "},{"title":"Table​","type":1,"pageTitle":"RailUtil","url":"/RailUtil/api/RailUtil#Table","content":"&lt;/&gt; RailUtil.Table: TableUtil The TableUtil module.  "},{"title":"Signal​","type":1,"pageTitle":"RailUtil","url":"/RailUtil/api/RailUtil#Signal","content":"&lt;/&gt; RailUtil.Signal: SignalUtil The SignalUtil module.  "},{"title":"Player​","type":1,"pageTitle":"RailUtil","url":"/RailUtil/api/RailUtil#Player","content":"&lt;/&gt; RailUtil.Player: PlayerUtil The PlayerUtil module.  "},{"title":"Instance​","type":1,"pageTitle":"RailUtil","url":"/RailUtil/api/RailUtil#Instance","content":"&lt;/&gt; RailUtil.Instance: InstanceUtil The InstanceUtil module.  "},{"title":"Fusion​","type":1,"pageTitle":"RailUtil","url":"/RailUtil/api/RailUtil#Fusion","content":"&lt;/&gt; RailUtil.Fusion: FusionUtil The FusionUtil module.  "},{"title":"String​","type":1,"pageTitle":"RailUtil","url":"/RailUtil/api/RailUtil#String","content":"&lt;/&gt; RailUtil.String: StringUtil The StringUtil module.  "},{"title":"Camera​","type":1,"pageTitle":"RailUtil","url":"/RailUtil/api/RailUtil#Camera","content":"&lt;/&gt; RailUtil.Camera: CameraUtil The CameraUtil module. "},{"title":"--------","type":0,"sectionRef":"#","url":"/RailUtil/api/--------","content":"On this page --------","keywords":""},{"title":"DrawUtil","type":0,"sectionRef":"#","url":"/RailUtil/api/DrawUtil","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"DrawUtil","url":"/RailUtil/api/DrawUtil#functions","content":" "},{"title":"clearVector​","type":1,"pageTitle":"DrawUtil","url":"/RailUtil/api/DrawUtil#clearVector","content":"&lt;/&gt; DrawUtil.clearVector( name: string-- The name of the vector to clear. ) → () Clears a vector from the world.  "},{"title":"point​","type":1,"pageTitle":"DrawUtil","url":"/RailUtil/api/DrawUtil#point","content":"&lt;/&gt; DrawUtil.point( name: string, position: Vector3 | CFrame , radius: number?, color: Color3? ) → () Draws a point in the world.  "},{"title":"clearPoint​","type":1,"pageTitle":"DrawUtil","url":"/RailUtil/api/DrawUtil#clearPoint","content":"&lt;/&gt; DrawUtil.clearPoint( name: string-- The name of the point to clear. ) → () Clears a point from the world.  "},{"title":"line​","type":1,"pageTitle":"DrawUtil","url":"/RailUtil/api/DrawUtil#line","content":"&lt;/&gt; DrawUtil.line( name: string, from: Vector3 , to: Vector3 , radius: number?, color: Color3? ) → () Draws a line between two points in the world.  "},{"title":"clearLine​","type":1,"pageTitle":"DrawUtil","url":"/RailUtil/api/DrawUtil#clearLine","content":"&lt;/&gt; DrawUtil.clearLine( name: string-- The name of the line to clear. ) → () Clears a line from the world. "},{"title":"CameraUtil","type":0,"sectionRef":"#","url":"/RailUtil/api/CameraUtil","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"CameraUtil","url":"/RailUtil/api/CameraUtil#properties","content":" "},{"title":"Instance​","type":1,"pageTitle":"CameraUtil","url":"/RailUtil/api/CameraUtil#Instance","content":"&lt;/&gt; CameraUtil.Instance: Camera  The current camera instance.  "},{"title":"CameraCFrame​","type":1,"pageTitle":"CameraUtil","url":"/RailUtil/api/CameraUtil#CameraCFrame","content":"&lt;/&gt; CameraUtil.CameraCFrame: State&lt;CFrame &gt; A Fusion State containing the current camera's CFrame.  "},{"title":"ViewportSize​","type":1,"pageTitle":"CameraUtil","url":"/RailUtil/api/CameraUtil#ViewportSize","content":"&lt;/&gt; CameraUtil.ViewportSize: State&lt;Vector2 &gt; A Fusion State containing the current camera's ViewportSize.  "},{"title":"ViewportSizeY​","type":1,"pageTitle":"CameraUtil","url":"/RailUtil/api/CameraUtil#ViewportSizeY","content":"&lt;/&gt; CameraUtil.ViewportSizeY: State&lt;number&gt; A Fusion Computed containing the current camera's ViewportSize.Y. "},{"title":"Functions​","type":1,"pageTitle":"CameraUtil","url":"/RailUtil/api/CameraUtil#functions","content":" "},{"title":"isOnScreen​","type":1,"pageTitle":"CameraUtil","url":"/RailUtil/api/CameraUtil#isOnScreen","content":"&lt;/&gt; CameraUtil.isOnScreen( worldPoint: Vector3 ,-- The world position to check. viewportMargin: number?-- The acceptable margin of viewport space to be considered on screen. Defaults to 50. ) → ( boolean,-- Whether or not the position is on screen. number-- The distance the point is from the camera ) A function that takes a world position and returns whether or not that point is on screen within the camera's viewport. "},{"title":"StringUtil","type":0,"sectionRef":"#","url":"/RailUtil/api/StringUtil","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"StringUtil","url":"/RailUtil/api/StringUtil#types","content":" "},{"title":"StrokeData​","type":1,"pageTitle":"StringUtil","url":"/RailUtil/api/StringUtil#StrokeData","content":"&lt;/&gt; interface StrokeData { Color: Color3? -- The color of the stroke. Joins: (&quot;miter&quot; | &quot;round&quot; | &quot;bevel&quot;)? | Enum.LineJoinMode?-- The type of joins the stroke has. Thickness: number?-- The thickness Transparency: number?-- The transparency of the stroke. }  "},{"title":"Functions​","type":1,"pageTitle":"StringUtil","url":"/RailUtil/api/StringUtil#functions","content":" "},{"title":"color​","type":1,"pageTitle":"StringUtil","url":"/RailUtil/api/StringUtil#color","content":"&lt;/&gt; StringUtil.color( text: string,-- The text to apply the color to. color: Color3 -- The color to apply to the text. ) → string-- The new string with the color applied. Returns a string with the given color applied to it.  "},{"title":"stroke​","type":1,"pageTitle":"StringUtil","url":"/RailUtil/api/StringUtil#stroke","content":"&lt;/&gt; StringUtil.stroke( text: string,-- The text to apply the stroke to. data: StrokeData-- The stroke data to apply to the text. ) → string-- The new string with the stroke applied. Returns a string with the given stroke applied to it.  "},{"title":"rich​","type":1,"pageTitle":"StringUtil","url":"/RailUtil/api/StringUtil#rich","content":"&lt;/&gt; StringUtil.rich( text: string,-- The text to apply the options to. options: { Color: Color3? , Stroke: StrokeData?, Bold: boolean?, Italic: boolean?, Underline: boolean?, }-- The options to apply to the text. ) → string-- The new string with the options applied. Returns a string with the given options applied to it.  "},{"title":"formatAssetId​","type":1,"pageTitle":"StringUtil","url":"/RailUtil/api/StringUtil#formatAssetId","content":"&lt;/&gt; StringUtil.formatAssetId( id: string | number-- The asset id to format. ) → string-- The formatted asset id. Ensures a given number or string is formatted as an asset id. StringUtil.formatAssetId(123456) -- &quot;rbxassetid://123456&quot; StringUtil.formatAssetId(&quot;123456&quot;) -- &quot;rbxassetid://123456&quot; StringUtil.formatAssetId(&quot;rbxassetid://123456&quot;) -- &quot;rbxassetid://123456&quot;   "},{"title":"formatNumberWithCommas​","type":1,"pageTitle":"StringUtil","url":"/RailUtil/api/StringUtil#formatNumberWithCommas","content":"&lt;/&gt; StringUtil.formatNumberWithCommas(num: number | string) → string Formats a number with commas. StringUtil.formatNumberWithCommas(&quot;12&quot;) -- &quot;12&quot; StringUtil.formatNumberWithCommas(1234) -- &quot;1,234&quot; StringUtil.formatNumberWithCommas(123456) -- &quot;123,456&quot; StringUtil.formatNumberWithCommas(&quot;1234567&quot;) -- &quot;1,234,567&quot; StringUtil.formatNumberWithCommas(12345.6789) -- &quot;12,345.6789&quot;   "},{"title":"truncateNumberWithSuffix​","type":1,"pageTitle":"StringUtil","url":"/RailUtil/api/StringUtil#truncateNumberWithSuffix","content":"&lt;/&gt; StringUtil.truncateNumberWithSuffix( num: number | string, config: { MaxDecimals: number?, ShowZeroes: boolean?, AddSpace: boolean?, }? ) → string Truncates a number to its nearest factor of 1000 and replaces the chopped off numbers with an appropriate suffix to enable easier reading. MaxDecimals: The maximum number of decimals to show. [Default: 1] ShowZeroes: Whether to always show zeroes after the decimal point. AddSpace: Whether to add a space between the number and the suffix StringUtil.truncateNumberWithSuffix(1.234) -- 1.2 StringUtil.truncateNumberWithSuffix(123) -- 123 StringUtil.truncateNumberWithSuffix(123, {MaxDecimals = 2, ShowZeroes = true}) -- 123.00 StringUtil.truncateNumberWithSuffix(1234) -- 1.2K StringUtil.truncateNumberWithSuffix(123456) -- 123.5K StringUtil.truncateNumberWithSuffix(123456, {MaxDecimals = 1}) -- 123.4K StringUtil.truncateNumberWithSuffix(&quot;123456&quot;, {MaxDecimals = 2}) -- 123.45K StringUtil.truncateNumberWithSuffix(123456, {MaxDecimals = 3}) -- 123.456K StringUtil.truncateNumberWithSuffix(123456789) -- 123.4M StringUtil.truncateNumberWithSuffix(1234567890) -- 1.2B   "},{"title":"formatTime​","type":1,"pageTitle":"StringUtil","url":"/RailUtil/api/StringUtil#formatTime","content":"&lt;/&gt; StringUtil.formatTime( inputTime: number,-- The time to format. inputTimeType: string?,-- The type of time that is being given to format. (d, h, m, s, ds, cs, ms) outputStringFormat: string?,-- The format of the output string. Must separated by colons, if you put a number before the timetype it will make sure the number has atleast that length, adding zeroes before it as needed. By default it will be (2h:2m:2s) config: { HideParentZeroValues: boolean?, Delimeter: string?, }? ) → string-- The formatted time string. Takes a number, a string defining the type of time given, and an output format and formats it to a pleasing structure ideal for displaying time. Examples: StringUtil.formatTime(3600, &quot;s&quot;, &quot;2h:2m:2s&quot;) -- &quot;01:00:00&quot; StringUtil.formatTime(125, &quot;s&quot;, &quot;2h:2m:2s&quot;) -- &quot;00:02:05&quot; StringUtil.formatTime(125, &quot;s&quot;, &quot;1h:1m:1s&quot;) -- &quot;0:2:5&quot; StringUtil.formatTime(125, &quot;s&quot;, &quot;h:m:s&quot;) -- &quot;0:2:5&quot; StringUtil.formatTime(125, &quot;s&quot;, &quot;2h:2m:2s&quot;, {HideParentZeroValues = true}) -- &quot;02:05&quot; StringUtil.formatTime(125, &quot;s&quot;, &quot;h:m:s:ds&quot;) -- &quot;0:2:5:0&quot; StringUtil.formatTime(125, &quot;s&quot;, &quot;h:m:s:ds&quot;, {HideParentZeroValues = true}) -- &quot;2:5:0&quot; StringUtil.formatTime(3725, &quot;s&quot;, &quot;h:s&quot;) -- &quot;1:125&quot; StringUtil.formatTime(1000, &quot;ms&quot;, &quot;s&quot;) -- &quot;1&quot;  "},{"title":"PlayerUtil","type":0,"sectionRef":"#","url":"/RailUtil/api/PlayerUtil","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"PlayerUtil","url":"/RailUtil/api/PlayerUtil#functions","content":" "},{"title":"getCharactersFolder​","type":1,"pageTitle":"PlayerUtil","url":"/RailUtil/api/PlayerUtil#getCharactersFolder","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; PlayerUtil.getCharactersFolder() → Folder -- The characters folder Returns the characters folder, creating it if it doesn't exist. This folder is used to store all characters in the game. This folder is created on the server and waited for on the client.  "},{"title":"promiseCharacter​","type":1,"pageTitle":"PlayerUtil","url":"/RailUtil/api/PlayerUtil#promiseCharacter","content":"&lt;/&gt; PlayerUtil.promiseCharacter( plr: Player ,-- The player to get the character of timeOut?: number?-- The amount of time to wait before rejecting the promise ) → Promise&lt;Character&gt;-- A promise that resolves when the character is retrieved Returns a promise that resolves with the character of the specified player once their character is within the proper folder.  "},{"title":"getPlayerFromCharacterDescendant​","type":1,"pageTitle":"PlayerUtil","url":"/RailUtil/api/PlayerUtil#getPlayerFromCharacterDescendant","content":"&lt;/&gt; PlayerUtil.getPlayerFromCharacterDescendant( descendant: Instance -- The descendant to get the player of ) → Player? -- The player that owns the character Returns the player that owns the specified descendant of a character. Returns nil if the descendant is not a descendant of a character.  "},{"title":"getAllLoadedCharacters​","type":1,"pageTitle":"PlayerUtil","url":"/RailUtil/api/PlayerUtil#getAllLoadedCharacters","content":"&lt;/&gt; PlayerUtil.getAllLoadedCharacters() → {Character}-- A table of all the fully loaded characters   "},{"title":"forEachCharacter​","type":1,"pageTitle":"PlayerUtil","url":"/RailUtil/api/PlayerUtil#forEachCharacter","content":"&lt;/&gt; PlayerUtil.forEachCharacter( func: ( char: Character, janitor: Janitor ) → (),-- A passed function to be executed for each character, it is given the character as an argument. Also receives a Janitor object that can be used to clean up any connections made. player: Player? -- An optional player to only run the function for their character. ) → Connection-- A connection that can be Disconnected or Destroyed to stop method's activities. Takes a function that will be run for every player in the game as well as any future players until the returned connection is disconnected.  "},{"title":"forEachPlayer​","type":1,"pageTitle":"PlayerUtil","url":"/RailUtil/api/PlayerUtil#forEachPlayer","content":"&lt;/&gt; PlayerUtil.forEachPlayer( func: ( player: Player , janitor: Janitor ) → ()-- A passed function to be executed for each player, it is given the player as an argument. ) → Connection-- A connection that can be Disconnected or Destroyed to stop method's activities. Takes a function that will be run for every player in the game as well as any future players until the returned connection is disconnected.  "},{"title":"onPlayerRemoving​","type":1,"pageTitle":"PlayerUtil","url":"/RailUtil/api/PlayerUtil#onPlayerRemoving","content":"&lt;/&gt; PlayerUtil.onPlayerRemoving( player: Player , fn: (T...) → (),-- The function to be run when the player disconnects. ...: T... ) → Connection-- A connection that can be Disconnected or Destroyed to stop method's activities. Takes a function that will be run for a specified player when they leave. "},{"title":"VectorUtil","type":0,"sectionRef":"#","url":"/RailUtil/api/VectorUtil","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#types","content":" "},{"title":"Vector​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#Vector","content":"&lt;/&gt; type Vector = Vector3 | Vector2    "},{"title":"Plane​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#Plane","content":"&lt;/&gt; type Plane = {number} Data type representing a plane. The plane is represented by a table with 4 values. Typically used for plane intersection calculations. "},{"title":"Functions​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#functions","content":" "},{"title":"unpack​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#unpack","content":"&lt;/&gt; VectorUtil.unpack(Vector: Vector) → ...number Splits a Vector into its components.  "},{"title":"snap​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#snap","content":"&lt;/&gt; VectorUtil.snap( vector: T&amp;Vector, snapToNearestMultiple: number ) → Vector Snaps a Vector to the nearest multiple of the given number for each coordinate.  "},{"title":"roundLength​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#roundLength","content":"Vector2 Vector3 &lt;/&gt; VectorUtil.roundLength( vector: T&amp;Vector, increment: number ) → T Rounds a Vectors length to the nearest multiple of the given number.  "},{"title":"randomUnitVector​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#randomUnitVector","content":"&lt;/&gt; VectorUtil.randomUnitVector() → Vector3  Returns a random unit vector3. Evenly distributes around the unit sphere.  "},{"title":"truncate​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#truncate","content":"&lt;/&gt; VectorUtil.truncate( Vector: T&amp;Vector,-- The vector to truncate. maxLength: number-- The maximum length of the vector. ) → Vector-- The truncated vector. Truncates the length of a vector such that if it exceeds the given length, it will be truncated to that length.  "},{"title":"getAngle​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#getAngle","content":"&lt;/&gt; VectorUtil.getAngle(vector: Vector2 ) → number Returns the angle of a Vector2 relative to the X axis.  "},{"title":"getAngleBetween​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#getAngleBetween","content":"&lt;/&gt; VectorUtil.getAngleBetween( firstVector: Vector, secondVector: Vector ) → number Returns the shortest angle between two vectors in Radians.  "},{"title":"getSignedAngleBetweenVector3s​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#getSignedAngleBetweenVector3s","content":"&lt;/&gt; VectorUtil.getSignedAngleBetweenVector3s( firstVector: Vector3 ,-- The start of the angle secondVector: Vector3 ,-- The end of the angle axis: Vector3 -- The axis to rotate around ) → number-- The signed angle between the two vectors in radians. Returns a signed angle in radians between two Vector3s around a given axis. The sign is calculated counter-clockwise, left of first vector is positive, right of first vector is negative.  "},{"title":"getSignedAngleBetweenVector2s​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#getSignedAngleBetweenVector2s","content":"&lt;/&gt; VectorUtil.getSignedAngleBetweenVector2s( firstVector: Vector2 ,-- The start of the angle secondVector: Vector2 -- The end of the angle ) → number-- The signed angle between the two vectors in radians. Returns a signed angle in radians between two vectors. The sign is calculated counter-clockwise, left of first vector is positive, right of first vector is negative.  "},{"title":"isNaN​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#isNaN","content":"&lt;/&gt; VectorUtil.isNaN(vector: Vector) → boolean Checks if a given vector is NaN.  "},{"title":"abs​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#abs","content":"&lt;/&gt; VectorUtil.abs(Vector: T&amp;Vector) → T Returns the absolute value of the Vector  "},{"title":"sign​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#sign","content":"&lt;/&gt; VectorUtil.sign(Vector: T&amp;Vector) → T Returns a Vector where each component is the sign of the original Vector.  "},{"title":"normalize​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#normalize","content":"&lt;/&gt; VectorUtil.normalize(Vector: T&amp;Vector) → T Safely Normalizes a Vector.  "},{"title":"flattenY​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#flattenY","content":"&lt;/&gt; VectorUtil.flattenY( Vector: Vector3 ,-- The Vector3 to flatten. newY: number?-- the height to flatten the vector to. Defaults to 0. ) → Vector3 -- The flattened Vector3. Flattens a Vector3 on its Y axis  "},{"title":"flatten​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#flatten","content":"&lt;/&gt; VectorUtil.flatten( Vector: Vector3 ,-- The Vector3 to flatten. axis: Enum.Axis,-- The axis to flatten the vector on. Defaults to &quot;Y&quot;. defaultValue: number?-- The value to set the flattened axis to. Defaults to 0. ) → Vector3 -- The flattened Vector3. Flattens a given Vector3 on a specified axis  "},{"title":"getAxis​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#getAxis","content":"&lt;/&gt; VectorUtil.getAxis( vector: Vector3 ,-- The Vector to pull from axis: Enum.Axis-- The axis to get ) → Vector3 -- The returned Vector containing only the specified axis. Takes a Vector and removes all values except the specified Axis.  "},{"title":"setAxis​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#setAxis","content":"&lt;/&gt; VectorUtil.setAxis( vector: Vector3 ,-- The Vector to change from axis: Enum.Axis,-- The axis to set value: number-- The new value of the axis ) → Vector3 -- The adjusted Vector Takes a Vector and sets the axis value to the specified number.  "},{"title":"rotateVector3​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#rotateVector3","content":"&lt;/&gt; VectorUtil.rotateVector3( vectorToRotate: Vector3 ,-- The vector to rotate. anglesToRotate: ({number} | Vector3 | CFrame )-- The angles to rotate the vector by. ) → Vector3 -- The rotated vector. Rotates a vector about its axis by the given angles. Takes a CFrame.Angles object as the angles to rotate by. Works similarly to rotating a CFrame. rotateVector(Vector3.new(1,0,0), CFrame.Angles(0,math.pi,0)) -- Output: Vector3.new(-1,0,0)  "},{"title":"rotateVector2​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#rotateVector2","content":"&lt;/&gt; VectorUtil.rotateVector2( vectorToRotate: Vector2 ,-- The vector to rotate. angle: number-- The angle [In Radians] to rotate the vector by. ) → Vector2 -- The rotated vector. Rotates a vector2 by a given amount of radians.  "},{"title":"closestPointOnLine​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#closestPointOnLine","content":"&lt;/&gt; VectorUtil.closestPointOnLine( refPoint: Vector3 ,-- The point to find the closest point to. linePoint: Vector3 ,-- A point along the line. lineDirection: Vector3 -- The direction of the line. ) → Vector3 -- The closest point on the line to the reference point. Finds the closest point on a line to a given point.  "},{"title":"closestPointsBetweenLines​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#closestPointsBetweenLines","content":"&lt;/&gt; VectorUtil.closestPointsBetweenLines( point1: Vector3 ,-- A point along the first line. direction1: Vector3 ,-- The direction of the first line. point2: Vector3 ,-- A point along the second line. direction2: Vector3 -- The direction of the second line. ) → ( Vector2 ,-- The closest point on the first line. Vector2 -- The closest point on the second line. ) Finds the closest two points on two lines. The lines are defined by some point along them and a direction  "},{"title":"planeIntersectionPoint​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#planeIntersectionPoint","content":"&lt;/&gt; VectorUtil.planeIntersectionPoint( lineOrigin: Vector3 ,-- A point along the line. lineDirection: Vector3 ,-- The direction of the line. planeOrigin: Vector3 ,-- A point on the plane. planeNormal: Vector3 -- The normal of the plane. ) → Vector3? -- The intersection point of the line and the plane if one exists. Finds the intersection point of a line and a plane.  "},{"title":"lineIntersectsSphere​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#lineIntersectsSphere","content":"&lt;/&gt; VectorUtil.lineIntersectsSphere( lineOrigin: Vector3 ,-- A point along the line. lineDirection: Vector3 ,-- The direction of the line. sphereOrigin: Vector3 ,-- The origin of the sphere. sphereRadius: number-- The radius of the sphere. ) → boolean-- Whether or not the line intersects the sphere. Tests whether or not a line of infinite length intersects a sphere at some point.  "},{"title":"lineSegmentIntersectsSphere​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#lineSegmentIntersectsSphere","content":"&lt;/&gt; VectorUtil.lineSegmentIntersectsSphere( linePoint1: Vector3 ,-- The start point of the line segment. linePoint2: Vector3 ,-- The end point of the line segment. sphereOrigin: Vector3 ,-- The center point of the sphere. sphereRadius: number-- The radius of the sphere. ) → boolean-- Whether or not the line segment intersects the sphere. Tests whether or not a line segment intersects a sphere at some point. Only returns true if the intersection point is between the two points of the line segment.  "},{"title":"calculatePlaneFromPoints​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#calculatePlaneFromPoints","content":"&lt;/&gt; VectorUtil.calculatePlaneFromPoints( p1: Vector3 ,-- The first point. p2: Vector3 ,-- The second point. p3: Vector3 -- The third point. ) → Plane-- The plane defined by the three points. Creates a plane from three points. The normal of the plane is determined by the input order of the points.  "},{"title":"calculatePlaneFromPointAndNormal​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#calculatePlaneFromPointAndNormal","content":"&lt;/&gt; VectorUtil.calculatePlaneFromPointAndNormal( point: Vector3 ,-- A point on the plane. normal: Vector3 -- The normal of the plane. ) → Plane-- The plane defined by the point and normal. Creates a plane from a point and a normal.  "},{"title":"pointLiesOnPlane​","type":1,"pageTitle":"VectorUtil","url":"/RailUtil/api/VectorUtil#pointLiesOnPlane","content":"&lt;/&gt; VectorUtil.pointLiesOnPlane( point: Vector3 ,-- The point to check. plane: Plane-- The plane to check against. ) → boolean-- Whether or not the point lies on the plane. Checks if a point lies on a plane. Use one of the calculatePlane functions to generate a plane. local plane = VectorUtil.calculatePlaneFromPoints(Vector3.new(0,0,0), Vector3.new(1,0,0), Vector3.new(0,1,0)) local point = Vector3.new(1,1,0) VectorUtil.pointLiesOnPlane(point plane) -- Output: true  "},{"title":"MathUtil","type":0,"sectionRef":"#","url":"/RailUtil/api/MathUtil","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"MathUtil","url":"/RailUtil/api/MathUtil#types","content":" "},{"title":"MathOperation​","type":1,"pageTitle":"MathUtil","url":"/RailUtil/api/MathUtil#MathOperation","content":"&lt;/&gt; type MathOperation = (&quot;+&quot; | &quot;-&quot; | &quot;*&quot; | &quot;/&quot; | &quot;^&quot; | &quot;%&quot;) A type consisting of all the valid math operations in string format. "},{"title":"Functions​","type":1,"pageTitle":"MathUtil","url":"/RailUtil/api/MathUtil#functions","content":" "},{"title":"snap​","type":1,"pageTitle":"MathUtil","url":"/RailUtil/api/MathUtil#snap","content":"&lt;/&gt; MathUtil.snap( v: number,-- The value to snap. ...: number | {number}-- The array or variadic of number values to snap to. ) → number-- The closest value to the given value. Takes a value and snaps it to the closest one of the following values.  "},{"title":"random​","type":1,"pageTitle":"MathUtil","url":"/RailUtil/api/MathUtil#random","content":"&lt;/&gt; MathUtil.random( min: number,-- The minimum value. max: number-- The maximum value. ) → number-- The random float. Returns a random float between the given min and max.  "},{"title":"randomFromNumberRange​","type":1,"pageTitle":"MathUtil","url":"/RailUtil/api/MathUtil#randomFromNumberRange","content":"&lt;/&gt; MathUtil.randomFromNumberRange( numberRange: NumberRange -- The number range to generate a random number from. ) → number-- The generated random number. Returns a random float in the given number range.  "},{"title":"randomFromArray​","type":1,"pageTitle":"MathUtil","url":"/RailUtil/api/MathUtil#randomFromArray","content":"&lt;/&gt; MathUtil.randomFromArray( tbl: {number}-- The array to get a random number from. ) → number-- The random number. Gets a random number within the given array.  "},{"title":"randomFromRanges​","type":1,"pageTitle":"MathUtil","url":"/RailUtil/api/MathUtil#randomFromRanges","content":"&lt;/&gt; MathUtil.randomFromRanges(...: {number} | NumberRange ) → number Gets a random number within the given ranges. By default the numbers within the ranges have an equal chance of being selected (unless the given table has a Weight index) local n = MathUtil.randomFromRanges({1, 10}, {20, 40}) -- Returns a random number between 1 and 10 or 20 and 40.   "},{"title":"tryRandom​","type":1,"pageTitle":"MathUtil","url":"/RailUtil/api/MathUtil#tryRandom","content":"&lt;/&gt; MathUtil.tryRandom( data: number | NumberRange | NumberSequence | {number},-- The data to try and generate a random number from. ...: any-- The optional arguments to pass to the random function. ) → number Trys to return a random number from the given data. It parses the data to try and figure out which random methodology to use.  "},{"title":"round​","type":1,"pageTitle":"MathUtil","url":"/RailUtil/api/MathUtil#round","content":"&lt;/&gt; MathUtil.round( numToRound: number,-- The number to round. multiple: number?-- The multiple to round to. If not specified, will round to the nearest integer. ) → Theroundednumber. Rounds a number to the nearest specified multiple.  "},{"title":"lerp​","type":1,"pageTitle":"MathUtil","url":"/RailUtil/api/MathUtil#lerp","content":"&lt;/&gt; MathUtil.lerp( a: number,-- The first number. b: number,-- The second number. t: number-- The alpha to lerp between the two numbers. ) → Thelerpednumber. Lerps a number between two other numbers based on a given alpha.  "},{"title":"isBetween​","type":1,"pageTitle":"MathUtil","url":"/RailUtil/api/MathUtil#isBetween","content":"&lt;/&gt; MathUtil.isBetween( numToCheck: number,-- The number to check. bound1: number,-- The first bound. bound2: number-- The second bound. ) → boolean-- Whether or not the number is between the two bounds. Checks if a number is between two other numbers.  "},{"title":"isClose​","type":1,"pageTitle":"MathUtil","url":"/RailUtil/api/MathUtil#isClose","content":"&lt;/&gt; MathUtil.isClose( num1: number,-- The first number. num2: number,-- The second number. epsilon: number?-- The epsilon to check between the two numbers. Defaults to 0.0001. ) → boolean-- Whether or not the two numbers are close to each other. Checks if two numbers are close to each other within a given epsilon.  "},{"title":"numbersToSequence​","type":1,"pageTitle":"MathUtil","url":"/RailUtil/api/MathUtil#numbersToSequence","content":"&lt;/&gt; MathUtil.numbersToSequence( values: {number} | number,-- The values to convert to a NumberSequence. splitPoints: ({number} | number)?-- The points along the line at which the values are split. Optional only if there is one value. ) → NumberSequence -- The generated NumberSequence. Converts a table of numbers to a NumberSequence grouped by split points. This is very useful when working with UI Gradient's transparency. local values = {4, 8} local sequence = MathUtil.numbersToSequence(values, 0.5) -- The sequence will be 4 at 0, 4 at 0.5, 8 at 0.5 + EPSILON, and 8 at 1.   "},{"title":"operate​","type":1,"pageTitle":"MathUtil","url":"/RailUtil/api/MathUtil#operate","content":"&lt;/&gt; MathUtil.operate( a: number, operator: string, b: number ) → number Performs a math operation on two numbers. "},{"title":"InstanceUtil","type":0,"sectionRef":"#","url":"/RailUtil/api/InstanceUtil","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#types","content":" "},{"title":"AnimPlayInfo​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#AnimPlayInfo","content":"&lt;/&gt; interface AnimPlayInfo { FadeInTime: number? Weight: number?, Speed: number?, FadeOutTime: number?, } A table of info for generating tweens for playing animations. "},{"title":"Functions​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#functions","content":" "},{"title":"findFirstChildFromPredicate​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#findFirstChildFromPredicate","content":"&lt;/&gt; InstanceUtil.findFirstChildFromPredicate( parent: Instance ,-- The Instance to search the children of. predicate: (child: Instance ) → boolean,-- The predicate which determines whether the child was found. recurse: boolean?-- Whether or not to search the parent's descendants instead of just its children. ) → Instance? -- The first child whose name matches the given string. Searches the parent for the first child which evaluates the given predicate to be true.  "},{"title":"findFirstChildThatMatches​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#findFirstChildThatMatches","content":"&lt;/&gt; InstanceUtil.findFirstChildThatMatches( parent: Instance ,-- The Instance to search the children of. matchString: string,-- The string to match the child's name to. Uses Lua's string.match function. Can take patterns. recurse: boolean?-- Whether or not to search the parent's descendants instead of just its children. ) → Instance -- The first child whose name matches the given string. Searches the parent for the first child whose name matches the given string.  "},{"title":"findFirstChildOfAncestor​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#findFirstChildOfAncestor","content":"&lt;/&gt; InstanceUtil.findFirstChildOfAncestor( descendant: Instance ,-- The Instance to find the ancestor of. ancestor: Instance -- The Instance to find the descendant's ancestor of. ) → Instance -- The first child of the ancestor that is an ancestor of the descendant. Finds the first child of the given ancestor that is an ancestor of the given descendant. This is useful when you have a bunch of models in a folder and you have a reference to a part in one of these models. It allows you to quickly find which of those immediate children models the part is in.  "},{"title":"getDescendantsWhichAre​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#getDescendantsWhichAre","content":"&lt;/&gt; InstanceUtil.getDescendantsWhichAre( Parent: Instance ,-- Instance to perform the search on. ClassName: string | {string}-- The class name or names the descendant must match or inherit. ) → {Instance? }-- Table with valid descendants of passed ClassName. Iterates through Parent descendants and returns a table which only contains descendants of passed ClassName.  "},{"title":"waitForChildFromPredicate​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#waitForChildFromPredicate","content":"&lt;/&gt; InstanceUtil.waitForChildFromPredicate( parent: Instance ,-- The Instance to search the children of. predicate: (child: Instance ) → boolean,-- The predicate which determines whether the child was found. timeout: number?,-- The maximum amount of time to wait for the child to be added. Defaults to 10 seconds. recurse: boolean?-- Whether or not to search the parent's descendants instead of just its children. ) → Promise&lt;Instance &gt;-- A Promise resolving with the first child who satisfies the predicate. Waits for the first child which evaluates the given predicate to be true.  "},{"title":"waitForChildWhichIsA​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#waitForChildWhichIsA","content":"&lt;/&gt; InstanceUtil.waitForChildWhichIsA( ancestor: Instance ,-- The Instance to search the children of. className: string,-- The class of the child to wait for. timeout?: number?-- The maximum amount of time to wait for the child to be added. Defaults to 10 seconds. ) → Promise&lt;Instance &gt;-- A promise that resolves with the child when it is added. Waits for a child of the given class in the given ancestor to be added.  "},{"title":"waitForChildThatMatches​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#waitForChildThatMatches","content":"&lt;/&gt; InstanceUtil.waitForChildThatMatches( ancestor: Instance ,-- The Instance to search the children of. matchString: string,-- The string to match the child's name to. Uses Lua's string.match function. Can take patterns. timeout: number?,-- The maximum amount of time to wait for the child to be added. Defaults ot 10 seconds. recurse: boolean?-- Whether or not to search the parent's descendants instead of just its children. ) → Promise&lt;Instance &gt;-- The first child whose name matches the given string. Waits for the first child whose name matches the given string.  "},{"title":"ensureInstance​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#ensureInstance","content":"&lt;/&gt; InstanceUtil.ensureInstance( parent: Instance ,-- The Instance to check. template: Instance ,-- The Instance to use as a template. name: string?-- The name of the child to find. Uses the template's name if not given. ) → Instance -- The existing or new child. Ensures that the given parent has a child with the given name. If not then it uses the given template to create a new child.  "},{"title":"destroyFirstChild​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#destroyFirstChild","content":"&lt;/&gt; InstanceUtil.destroyFirstChild( parent: Instance ,-- The Instance to search the children of. descendantName: string,-- The name of the descendant to destroy. recurse: boolean?-- Whether or not to search the parent's descendants instead of just its children. ) → () Attempts to destroy a named descendant of the given parent.  "},{"title":"safeDestroy​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#safeDestroy","content":"&lt;/&gt; InstanceUtil.safeDestroy( instance: Instance -- The Instance to destroy. ) → ( boolean,-- Whether or not the instance was destroyed. False is the instance was already destroyed. string-- The error message if the instance could not be destroyed. ) Attempts to destroy the given instance.  "},{"title":"weld​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#weld","content":"&lt;/&gt; InstanceUtil.weld( part1: BasePart ,-- The first part to weld. part2: BasePart -- The second part to weld. ) → WeldConstraint -- The WeldConstraint created. Creates a WeldConstraint between two parts.  "},{"title":"weldAssembly​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#weldAssembly","content":"&lt;/&gt; InstanceUtil.weldAssembly( model: Model ,-- The Model to weld the parts of. primaryPart: BasePart? -- The Part to weld the parts to. Defaults to Model.PrimaryPart ) → {WeldConstraint }-- The WeldConstraints created. Weld each individual part to the Model Model .PrimaryPart;  "},{"title":"getAttachmentsAlignedCFrame​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#getAttachmentsAlignedCFrame","content":"&lt;/&gt; InstanceUtil.getAttachmentsAlignedCFrame( partAttachment: Attachment , targetAttachment: Attachment ) → CFrame  Gets the CFrame of the given partAttachment's parent needed to align with the targetAttachment. This is useful for aligning two parts such that their attachments are equivalent in CFrame. info This is effectively the same as using a RigidConstraint with the attachments if the parent part is unanchored.  "},{"title":"getModelFitDistance​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#getModelFitDistance","content":"&lt;/&gt; InstanceUtil.getModelFitDistance( model: Model | BasePart ,-- The Model to get the distance for. vpf: ViewportFrame ,-- The ViewportFrame to fit the model into. camera: Camera? -- The Camera to use. Defaults to the ViewportFrame's CurrentCamera. ) → number-- The distance from the model the camera should be. Gets the distance from the camera to the model that would fit the model in the viewport frame.  "},{"title":"emitParticles​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#emitParticles","content":"&lt;/&gt; InstanceUtil.emitParticles( parent: Instance ,-- The Instance to search Particles for emitCount: number?-- The number of particles to emit ) → () Takes an Instance and Emits it and any descendants it has. Optional Attributes that any of the descendant ParticleEmitters could have: EmitDelay: number? -- The delay before emitting EmitCount: number? -- The number of particles to emit at the start EmitDuration: number? -- The duration to emit particles for   "},{"title":"cloneChildren​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#cloneChildren","content":"&lt;/&gt; InstanceUtil.cloneChildren( parent: Instance ,-- The Instance to take the children of newParent: Instance ,-- The Instance to parent the cloned children to predicate: ((object: Instance ) → boolean)?-- A function to filter which children it should clone ) → {Instance }-- The cloned children Takes an Instance and Clones all of its children into a new Instance.  "},{"title":"promiseChild​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#promiseChild","content":"&lt;/&gt; InstanceUtil.promiseChild( parent: Instance ,-- The Instance to take the children of childName: string,-- The Instance name to look for timeout: number?-- The number of seconds to wait before timing out ) → Promise-- A Promise that resolves when the child is found or rejects if the timeout is reached. Promisifys the WaitForChild method on an Instance and adds in more robust error handling.  "},{"title":"isClass​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#isClass","content":"&lt;/&gt; InstanceUtil.isClass( instance: Instance ,-- The Instance to check the type of. classNames: string | {string}-- The ClassName or ClassNames to check against. ) → boolean-- Whether or not the instance is any of the given classes. Checks to see if the given instance is any of the given classes.  "},{"title":"fetchModule​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#fetchModule","content":"&lt;/&gt; InstanceUtil.fetchModule( parent: Instance ,-- The Instance that has it and its descendants checked against. moduleName: string,-- The name of the ModuleScript to search for. defaultValue: any?-- The default value to return if the ModuleScript could not be found. ) → any Searches for a ModuleScript in the given parent with the given name. If a descendant is found with the given name and is an ObjectValue, this value will be assumed to be the ModuleScript. If the ModuleScript could not be found it will return the defaultValue if it is provided. Otherwise it will error.  "},{"title":"hasProperty​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#hasProperty","content":"&lt;/&gt; InstanceUtil.hasProperty( object: Instance ,-- The Instance to check the property of. property: string-- The property to check for. ) → ( boolean,-- Whether or not the instance has the property. any-- The value of the property if it exists. ) Checks to see if a given instance has a property. If it does, it will return true and the value of the property. If it does not, it will return false and a message.  "},{"title":"playTracksAsync​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#playTracksAsync","content":"&lt;/&gt; InstanceUtil.playTracksAsync( tracks: AnimationTrack | {AnimationTrack },-- The AnimationTrack or array of AnimationTracks to play. animInfo: AnimPlayInfo?,-- The AnimPlayInfo to use when playing the tracks. keyframeMarkerToResolveAt: string?-- The Keyframe marker to resolve at instead of the animations ending ) → Promise-- A Promise that resolves when all tracks have stopped playing. Takes a track or array of AnimationTracks and plays them all asynchronously.  "},{"title":"playTween​","type":1,"pageTitle":"InstanceUtil","url":"/RailUtil/api/InstanceUtil#playTween","content":"&lt;/&gt; InstanceUtil.playTween( obj: Tween | Instance ,-- The Tween to play or the instance to play on. info: TweenInfo? , goals: {[string]: any}? ) → Promise-- A Promise that resolves when the tween has finished. Plays a tween as a promise. If a tween is not given then standard tween parameters are used to create a new tween. "},{"title":"FusionUtil","type":0,"sectionRef":"#","url":"/RailUtil/api/FusionUtil","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#functions","content":" "},{"title":"promiseStateChange​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#promiseStateChange","content":"&lt;/&gt; FusionUtil.promiseStateChange( state: State&lt;any&gt;,-- The state to observe callback: ((value: any) → boolean)?-- An optional condition to check before resolving the promise ) → Promise-- The promise that will resolve when the state changes Creates a promise that resolves when the given state changes. If a callback is given then the callback must return true for the promise to resolve. local a = Value(10) FusionUtil.promiseStateChange(a, function(value) return value &gt; 10 end):andThen(function(value) print(&quot;Value is now greater than 10&quot;) end) a:set(5) -- Promise does not resolve a:set(15) -- Promise resolves   "},{"title":"formatAssetId​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#formatAssetId","content":"&lt;/&gt; FusionUtil.formatAssetId( id: CanBeState&lt;string | number&gt;,-- The AssetId to format default: (string | number)?-- The default AssetId to use if the id is nil ) → CanBeState&lt;string&gt;-- The State that is synced with the AssetId Takes an AssetId and ensures it to a valid State. local assetId = FusionUtil.formatAssetId(&quot;rbxassetid://1234567890&quot;) print( peek(assetId) ) -- &quot;rbxassetid://1234567890&quot; local assetId = FusionUtil.formatAssetId(1234567890) print( peek(assetId) ) -- &quot;rbxassetid://1234567890&quot;   "},{"title":"ratio​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#ratio","content":"&lt;/&gt; FusionUtil.ratio( numerator: CanBeState&lt;number&gt;,-- The numerator of the ratio denominator: CanBeState&lt;number&gt;,-- The denominator of the ratio mutator: (CanBeState&lt;T&gt; | (ratio: number) → T)?-- An optional State to scale by or a function to mutate the ratio ) → State&lt;T&gt;-- The ratio (Potentially mutated) Generates a computed that calculates the ratio of two numbers as a State. local numerator = Value(100) local denominator = Value(200) local ratio = FusionUtil.ratio(numerator, denominator) print( peek(ratio) ) -- 0.5   "},{"title":"eq​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#eq","content":"&lt;/&gt; FusionUtil.eq( stateToCheck1: CanBeState&lt;any&gt;,-- The first potential state to check stateToCheck2: CanBeState&lt;any&gt;-- The second potential state to check ) → State&lt;boolean&gt;-- A state resolving to the equality of the two given arguments A simple equality function that returns true if the two states are equal. local a = Value(10) local b = Value(10) local c = FusionUtil.eq(a, b) print( peek(c) ) -- true a:set(20) print( peek(c) ) -- false   "},{"title":"promiseStateChange​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#promiseStateChange","content":"&lt;/&gt; FusionUtil.promiseStateChange( state: State&lt;any&gt;,-- The state to observe callback: ((value: any) → boolean)?-- An optional condition to check before resolving the promise ) → Promise-- The promise that will resolve when the state changes Creates a promise that resolves when the given state changes. If a callback is given then the callback must return true for the promise to resolve. local a = Value(10) FusionUtil.promiseStateChange(a, function(value) return value &gt; 10 end):andThen(function(value) print(&quot;Value is now greater than 10&quot;) end) a:set(5) -- Promise does not resolve a:set(15) -- Promise resolves   "},{"title":"defaultProps​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#defaultProps","content":"&lt;/&gt; FusionUtil.defaultProps( explicitProps: Props,-- The props to use defaultProps: Props-- The default props that to fill in the gaps of explicit ) → table-- The reconciled props Similar to a shallow reconcile, but also moves any children at numeric indices  "},{"title":"ensureIsState​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#ensureIsState","content":"&lt;/&gt; FusionUtil.ensureIsState( data: CanBeState&lt;T&gt;?,-- The potential state object defaultValue: T?,-- The default value to use if the data is nil datatype: (string | {string})?-- The type or types of the data expected in the state ) → StateObject&lt;T&gt;-- The existing or newly created state object Ensures a passed data is a StateObject. If it is not, it will be converted to one.  "},{"title":"ensureIsValue​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#ensureIsValue","content":"&lt;/&gt; FusionUtil.ensureIsValue( data: T | Value&lt;T&gt;,-- The potential value defaultValue: T?,-- The default value to use if the data is nil or an invalid type datatype: (string | {string})?-- The type or types of the data expected in the value ) → Value&lt;T&gt;-- The existing or newly created value Ensures the given data is a settable Value. Allows for passing of a default value and a datatype to check against.  "},{"title":"syncValues​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#syncValues","content":"&lt;/&gt; FusionUtil.syncValues( stateToWatch: State&lt;any&gt;,-- The state to watch for changes valueToSet: Value&lt;any&gt;-- The value to set when the state changes ) → () → ()-- A function that will disconnect the observer Syncronizes a StateObject to a Value. The Value will be set to the StateObject's value any time it changes. local a = Value(123) local b = Value(0) local disconnect = FusionUtil.syncValues(a, b) print( peek(b) ) -- 123 a:set(456) print( peek(b) ) -- 456 disconnect()   "},{"title":"ensureAssetId​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#ensureAssetId","content":"&lt;/&gt; FusionUtil.ensureAssetId( id: CanBeState&lt;string | number&gt;,-- The AssetId to ensure default: (string | number)?-- The default AssetId to use if the id is nil ) → CanBeState&lt;string&gt;-- The State that is synced with the AssetId Takes an AssetId and ensures it to a valid State. local assetId = FusionUtil.ensureAssetId(&quot;rbxassetid://1234567890&quot;) print( peek(assetId) ) -- &quot;rbxassetid://1234567890&quot; local assetId = FusionUtil.ensureAssetId(1234567890) print( peek(assetId) ) -- &quot;rbxassetid://1234567890&quot;   "},{"title":"ratio​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#ratio","content":"&lt;/&gt; FusionUtil.ratio( numerator: CanBeState&lt;number&gt;,-- The numerator of the ratio denominator: CanBeState&lt;number&gt;,-- The denominator of the ratio mutator: (CanBeState&lt;T&gt; | ( ratio: number, use: Use ) → T)?-- An optional State to scale by or a function to mutate the ratio ) → State&lt;T&gt;-- The ratio (Potentially mutated) Generates a computed that calculates the ratio of two numbers as a State. local numerator = Value(100) local denominator = Value(200) local ratio = FusionUtil.ratio(numerator, denominator) print( peek(ratio) ) -- 0.5   "},{"title":"ratioUDim2​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#ratioUDim2","content":"&lt;/&gt; FusionUtil.ratioUDim2( numerator: CanBeState&lt;number&gt;,-- The numerator of the ratio denominator: CanBeState&lt;number&gt;,-- The denominator of the ratio v: CanBeState&lt;UDim2 &gt;-- The UDim2 to scale ) → State&lt;UDim2 &gt;-- The scaled UDim2 Wraps FusionUtil.ratio with a handler for UDim2s local numerator = Value(100) local denominator = Value(200) local size = Value(UDim2.new(0.2, 100, 0.2, 100)) local sizeAdjusted = FusionUtil.ratioUDim2(numerator, denominator, size) print( peek(sizeAdjusted) ) -- UDim2.new(0.1, 50, 0.1, 50)   "},{"title":"screenRatio​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#screenRatio","content":"This item only works when running on the client. Client &lt;/&gt; FusionUtil.screenRatio( mutator: (CanBeState&lt;T&gt; | ( ratio: number, use: Use ) → T)?,-- An optional State to scale by or a function to mutate the ratio ratioFn: any-- An optional function to use for the ratio, defaults to FusionUtil.ratio, but could be given something like FusionUtil.ratioUDim2 ) → () This wraps FusionUtil.ratio with a handler for scaling states/functions with the Screen Height. local paddingOffset = Value(10) local paddingAdjusted = FusionUtil.screenRatio(paddingOffset) local size = Value(UDim2.new(0, 100, 0, 100)) local sizeAdjusted = FusionUtil.screenRatio(size, FusionUtil.ratioUDim2) local x = Value(10) local y = Value(20) local z = FusionUtil.screenRatio(function(ratio, use) return (use(x) + use(y)) * ratio end)   "},{"title":"lerpNumber​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#lerpNumber","content":"&lt;/&gt; FusionUtil.lerpNumber( n1: CanBeState&lt;number&gt;,-- The first number state n2: CanBeState&lt;number&gt;,-- The second number state alpha: CanBeState&lt;number&gt;,-- The alpha state _use: ((any) → (any))?-- An optional function to use to get the values of the states ) → State&lt;number&gt; | number-- The resultant lerped number state Lerps between two number states. If no use function is given then it returns a state local a = Value(10) local b = Value(20) local alpha = Value(0.5) local z = FusionUtil.lerpNumber(a, b, alpha) print( peek(z) ) -- 15   "},{"title":"ifThenElse​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#ifThenElse","content":"&lt;/&gt; FusionUtil.ifThenElse( stateToCheck: State&lt;boolean&gt;,-- The condition to check trueOutcome: CanBeState&lt;X&gt;,-- The value to return if the condition is true falseOutcome: CanBeState&lt;Y&gt;-- The value to return if the condition is false ) → State&lt;X | Y&gt;-- The value that was returned A simple swap function that returns the first value if the condition is true, otherwise returns the second value. Helps with simplifying lots of bulky computeds. local a = Value(10) local b = Value(20) local y = Value(false) local z = FusionUtil.ifThenElse(y, a, b) print( peek(z) ) -- 20 y:set(true) print( peek(z) ) -- 10   "},{"title":"eq​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#eq","content":"&lt;/&gt; FusionUtil.eq( stateToCheck1: CanBeState&lt;any&gt;,-- The first potential state to check stateToCheck2: CanBeState&lt;any&gt;-- The second potential state to check ) → State&lt;boolean&gt;-- A state resolving to the equality of the two given arguments A simple equality function that returns true if the two states are equal. local a = Value(10) local b = Value(10) local c = FusionUtil.eq(a, b) print( peek(c) ) -- true a:set(20) print( peek(c) ) -- false   "},{"title":"ifExists​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#ifExists","content":"&lt;/&gt; FusionUtil.ifExists( value: any?,-- Value to check existance. fn: (T...) → U...,-- Callback to run if 'value' exists. ...: any-- Args to be passed to the callback. ) → U...?-- The returned value of the callback if 'value' exists. Checks if a given value exists, if it does then this returns the returned value of the passed function.  "},{"title":"ifIsState​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#ifIsState","content":"&lt;/&gt; FusionUtil.ifIsState( state: any?,-- State to check existence. fn: (T...) → U...,-- Callback to run if 'value' is a state. ...: any-- Args to be passed to the callback. ) → U...?-- The returned value of the callback if 'value' exists. Checks if a given value is a state, if it does then this returns the returned value of the passed function.  "},{"title":"observeState​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#observeState","content":"&lt;/&gt; FusionUtil.observeState( fusionState: State&lt;any&gt;,-- The state object to observe callback: (stateValue: any) → ()-- The callback to call when the fusionState is updated ) → () → ()-- A function that will disconnect the observer Calls the provided callback immediately with the initial state and again anytime the state updates.  "},{"title":"watchAttribute​","type":1,"pageTitle":"FusionUtil","url":"/RailUtil/api/FusionUtil#watchAttribute","content":"deprecated in v1.0.0 &lt;/&gt; This was deprecated in v1.0.0 Use Fusion's Attribute System instead FusionUtil.watchAttribute( parent: Instance ,-- The parent instance to watch for attribute changes attribute: string,-- The name of the attribute to watch defaultValue: any?-- The default value to use if the attribute is nil ) → ( State,-- The state object that is synced with the value () → ()-- A function that will disconnect the observer ) Syncronizes an instances attribute to a Value. The value will be set to the attribute's value any time it changes. This is superceded by Fusion's Attribute System and should no longer be used. "},{"title":"TableUtil","type":0,"sectionRef":"#","url":"/RailUtil/api/TableUtil","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#functions","content":" "},{"title":"Copy​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Copy","content":"&lt;/&gt; TableUtil.Copy( tbl: table,-- Table to copy deep: boolean?-- Whether or not to perform a deep copy ) → table Creates a copy of the given table. By default, a shallow copy is performed. For deep copies, a second boolean argument must be passed to the function. No cyclical references Deep copies are not protected against cyclical references. Passing a table with cyclical references and the deep parameter set to true will result in a stack-overflow.  "},{"title":"Sync​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Sync","content":"&lt;/&gt; TableUtil.Sync( srcTbl: table,-- Source table templateTbl: table-- Template table ) → table Synchronizes the srcTbl based on the templateTbl. This will make sure that srcTbl has all of the same keys as templateTbl, including removing keys in srcTbl that are not present in templateTbl. This is a deep operation, so any nested tables will be synchronized as well. local template = {kills = 0, deaths = 0, xp = 0} local data = {kills = 10, experience = 12} data = TableUtil.Sync(data, template) print(data) --&gt; {kills = 10, deaths = 0, xp = 0} Data Loss Warning This is a two-way sync, so the source table will have dataremoved that isn't found in the template table. This can be problematic if used for player data, where there might be dynamic data added that isn't in the template. For player data, use TableUtil.Reconcile instead.  "},{"title":"Reconcile​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Reconcile","content":"&lt;/&gt; TableUtil.Reconcile( source: table, template: table ) → table Performs a one-way sync on the source table against the template table. Any keys found in template that are not found in source will be added to source. This is useful for syncing player data against data template tables to ensure players have all the necessary keys, while maintaining existing keys that may no longer be in the template. This is a deep operation, so nested tables will also be properly reconciled. local template = {kills = 0, deaths = 0, xp = 0} local data = {kills = 10, abc = 20} local correctedData = TableUtil.Reconcile(data, template) print(correctedData) --&gt; {kills = 10, deaths = 0, xp = 0, abc = 20}   "},{"title":"SwapRemove​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#SwapRemove","content":"&lt;/&gt; TableUtil.SwapRemove( tbl: table,-- Array i: number-- Index ) → () Removes index i in the table by swapping the value at i with the last value in the array, and then trimming off the last value from the array. This allows removal of the value at i in O(1) time, but does not preserve array ordering. If a value needs to be removed from an array, but ordering of the array does not matter, using SwapRemove is always preferred over table.remove. In the following example, we remove &quot;B&quot; at index 2. SwapRemove does this by moving the last value &quot;E&quot; over top of &quot;B&quot;, and then trimming off &quot;E&quot; at the end of the array: local t = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;} TableUtil.SwapRemove(t, 2) -- Remove &quot;B&quot; print(t) --&gt; {&quot;A&quot;, &quot;E&quot;, &quot;C&quot;, &quot;D&quot;} Arrays only This function works on arrays, but not dictionaries.  "},{"title":"SwapRemoveFirstValue​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#SwapRemoveFirstValue","content":"&lt;/&gt; TableUtil.SwapRemoveFirstValue( tbl: table,-- Array v: any-- Value to find ) → number? Performs table.find(tbl, v) to find the index of the given value, and then performs TableUtil.SwapRemove on that index. local t = {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;} TableUtil.SwapRemoveFirstValue(t, &quot;C&quot;) print(t) --&gt; {&quot;A&quot;, &quot;B&quot;, &quot;E&quot;, &quot;D&quot;} Arrays only This function works on arrays, but not dictionaries.  "},{"title":"Map​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Map","content":"&lt;/&gt; TableUtil.Map( tbl: table, predicate: ( value: any, key: any, tbl: table ) → newValue: any ) → table Performs a map operation against the given table, which can be used to map new values based on the old values at given keys/indices. For example: local t = {A = 10, B = 20, C = 30} local t2 = TableUtil.Map(t, function(value) return value * 2 end) print(t2) --&gt; {A = 20, B = 40, C = 60}   "},{"title":"Filter​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Filter","content":"&lt;/&gt; TableUtil.Filter( tbl: table, predicate: ( value: any, key: any, tbl: table ) → keep: boolean ) → table Performs a filter operation against the given table, which can be used to filter out unwanted values from the table. For example: local t = {A = 10, B = 20, C = 30} local t2 = TableUtil.Filter(t, function(value, key) return value &gt; 15 end) print(t2) --&gt; {B = 40, C = 60}   "},{"title":"Reduce​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Reduce","content":"&lt;/&gt; TableUtil.Reduce( tbl: table, predicate: ( accumulator: any, value: any, index: any, tbl: table ) → result: any ) → table Performs a reduce operation against the given table, which can be used to reduce the table into a single value. This could be used to sum up a table or transform all the values into a compound value of any kind. For example: local t = {10, 20, 30, 40} local result = TableUtil.Reduce(t, function(accum, value) return accum + value end) print(result) --&gt; 100   "},{"title":"Assign​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Assign","content":"&lt;/&gt; TableUtil.Assign( target: table, ...: table ) → table Copies all values of the given tables into the target table. local t = {A = 10} local t2 = {B = 20} local t3 = {C = 30, D = 40} local newT = TableUtil.Assign(t, t2, t3) print(newT) --&gt; {A = 10, B = 20, C = 30, D = 40}   "},{"title":"Extend​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Extend","content":"&lt;/&gt; TableUtil.Extend( target: table, extension: table ) → table Extends the target array with the extension array. local t = {10, 20, 30} local t2 = {30, 40, 50} local tNew = TableUtil.Extend(t, t2) print(tNew) --&gt; {10, 20, 30, 30, 40, 50} Arrays only This function works on arrays, but not dictionaries.  "},{"title":"Reverse​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Reverse","content":"&lt;/&gt; TableUtil.Reverse(tbl: table) → table Reverses the array. local t = {1, 5, 10} local tReverse = TableUtil.Reverse(t) print(tReverse) --&gt; {10, 5, 1} Arrays only This function works on arrays, but not dictionaries.  "},{"title":"Shuffle​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Shuffle","content":"&lt;/&gt; TableUtil.Shuffle( tbl: table, rngOverride: Random? ) → table Shuffles the table. local t = {1, 2, 3, 4, 5, 6, 7, 8, 9} local shuffled = TableUtil.Shuffle(t) print(shuffled) --&gt; e.g. {9, 4, 6, 7, 3, 1, 5, 8, 2} Arrays only This function works on arrays, but not dictionaries.  "},{"title":"Sample​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Sample","content":"&lt;/&gt; TableUtil.Sample( tbl: table, sampleSize: number, rngOverride: Random? ) → table Returns a random sample of the table. local t = {1, 2, 3, 4, 5, 6, 7, 8, 9} local sample = TableUtil.Sample(t, 3) print(sample) --&gt; e.g. {6, 2, 5} Arrays only This function works on arrays, but not dictionaries.  "},{"title":"Flat​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Flat","content":"&lt;/&gt; TableUtil.Flat( tbl: table, depth: number? ) → table Returns a new table where all sub-arrays have been bubbled up to the top. The depth at which the scan is performed is dictated by the depth parameter, which is set to 1 by default. local t = {{10, 20}, {90, 100}, {30, 15}} local flat = TableUtil.Flat(t) print(flat) --&gt; {10, 20, 90, 100, 30, 15} Arrays only This function works on arrays, but not dictionaries.  "},{"title":"FlatMap​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#FlatMap","content":"&lt;/&gt; TableUtil.FlatMap( tbl: table, predicate: ( key: any, value: any, tbl: table ) → newValue: any ) → table Calls TableUtil.Map on the given table and predicate, and then calls TableUtil.Flat on the result from the map operation. local t = {10, 20, 30} local result = TableUtil.FlatMap(t, function(value) return {value, value * 2} end) print(result) --&gt; {10, 20, 20, 40, 30, 60} Arrays only This function works on arrays, but not dictionaries.  "},{"title":"Keys​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Keys","content":"&lt;/&gt; TableUtil.Keys(tbl: table) → table Returns an array with all the keys in the table. local t = {A = 10, B = 20, C = 30} local keys = TableUtil.Keys(t) print(keys) --&gt; {&quot;A&quot;, &quot;B&quot;, &quot;C&quot;} Ordering The ordering of the keys is never guaranteed. If order is imperative, calltable.sort on the resulting keys array. local keys = TableUtil.Keys(t) table.sort(keys)   "},{"title":"Values​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Values","content":"&lt;/&gt; TableUtil.Values(tbl: table) → table Returns an array with all the values in the table. local t = {A = 10, B = 20, C = 30} local values = TableUtil.Values(t) print(values) --&gt; {10, 20, 30} Ordering The ordering of the values is never guaranteed. If order is imperative, calltable.sort on the resulting values array. local values = TableUtil.Values(t) table.sort(values)   "},{"title":"Find​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Find","content":"&lt;/&gt; TableUtil.Find( tbl: table, callback: ( value: any, index: any, tbl: table ) → boolean ) → ( value: any?, key: any? ) Performs a linear scan across the table and calls callback on each item in the array. Returns the value and key of the first pair in which the callback returns true. local t = { {Name = &quot;Bob&quot;, Age = 20}; {Name = &quot;Jill&quot;, Age = 30}; {Name = &quot;Ann&quot;, Age = 25}; } -- Find first person who has a name starting with J: local firstPersonWithJ = TableUtil.Find(t, function(person) return person.Name:sub(1, 1):lower() == &quot;j&quot; end) print(firstPersonWithJ) --&gt; {Name = &quot;Jill&quot;, Age = 30} Dictionary Ordering While Find can also be used with dictionaries, dictionary ordering is never guaranteed, and thus the result could be different if there are more than one possible matches given the data and callback function.  "},{"title":"Every​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Every","content":"&lt;/&gt; TableUtil.Every( tbl: table, callback: ( value: any, index: any, tbl: table ) → boolean ) → boolean Returns true if the callback also returns true for every item in the table. local t = {10, 20, 40, 50, 60} local allAboveZero = TableUtil.Every(t, function(value) return value &gt; 0 end) print(&quot;All above zero:&quot;, allAboveZero) --&gt; All above zero: true   "},{"title":"Some​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Some","content":"&lt;/&gt; TableUtil.Some( tbl: table, callback: ( value: any, index: any, tbl: table ) → boolean ) → boolean Returns true if the callback also returns true for at least one of the items in the table. local t = {10, 20, 40, 50, 60} local someBelowTwenty = TableUtil.Some(t, function(value) return value &lt; 20 end) print(&quot;Some below twenty:&quot;, someBelowTwenty) --&gt; Some below twenty: true   "},{"title":"Truncate​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Truncate","content":"&lt;/&gt; TableUtil.Truncate( tbl: table, length: number ) → table Returns a new table truncated to the length of length. Any length equal or greater than the current length will simply return a shallow copy of the table. local t = {10, 20, 30, 40, 50, 60, 70, 80} local tTruncated = TableUtil.Truncate(t, 3) print(tTruncated) --&gt; {10, 20, 30}   "},{"title":"Zip​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Zip","content":"&lt;/&gt; TableUtil.Zip(...: table) → ( iter: ( t: table, k: any ) → ( key: any?, values: table? ), tbl: table, startIndex: any? ) Returns an iterator that can scan through multiple tables at the same time side-by-side, matching against shared keys/indices. local t1 = {10, 20, 30, 40, 50} local t2 = {60, 70, 80, 90, 100} for key,values in TableUtil.Zip(t1, t2) do print(key, values) end --[[ Outputs: 1 {10, 60} 2 {20, 70} 3 {30, 80} 4 {40, 90} 5 {50, 100} --]]   "},{"title":"Lock​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Lock","content":"&lt;/&gt; TableUtil.Lock(tbl: table) → table Locks the table using table.freeze, as well as any nested tables within the given table. This will lock the whole deep structure of the table, disallowing any further modifications. local tbl = {xyz = {abc = 32}} tbl.xyz.abc = 28 -- Works fine TableUtil.Lock(tbl) tbl.xyz.abc = 64 -- Will throw an error (cannot modify readonly table)   "},{"title":"IsEmpty​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#IsEmpty","content":"&lt;/&gt; TableUtil.IsEmpty(tbl: table) → boolean Returns true if the given table is empty. This is simply performed by checking if next(tbl) is nil and works for both arrays and dictionaries. This is useful when needing to check if a table is empty but not knowing if it is an array or dictionary. TableUtil.IsEmpty({}) -- true TableUtil.IsEmpty({&quot;abc&quot;}) -- false TableUtil.IsEmpty({abc = 32}) -- false   "},{"title":"EncodeJSON​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#EncodeJSON","content":"&lt;/&gt; TableUtil.EncodeJSON(value: any) → string Proxy for HttpService:JSONEncode.  "},{"title":"DecodeJSON​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#DecodeJSON","content":"&lt;/&gt; TableUtil.DecodeJSON(value: any) → string Proxy for HttpService:JSONDecode.  "},{"title":"ShallowReconcile​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#ShallowReconcile","content":"&lt;/&gt; TableUtil.ShallowReconcile( src: S, template: T ) → S&amp;T Performs a one-way sync on the source table against the template table. Any keys found in template that are not found in source will be added to source. This is useful for syncing player data against data template tables to ensure players have all the necessary keys, while maintaining existing keys that may no longer be in the template. local template = {kills = 0, deaths = 0, xp = 0} local data = {kills = 10, abc = 20} local correctedData = TableUtil.ShallowReconcile(data, template) print(correctedData) --&gt; {kills = 10, deaths = 0, xp = 0, abc = 20}   "},{"title":"ToDict​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#ToDict","content":"&lt;/&gt; TableUtil.ToDict( array: {T},-- The array to parse fn: ( T, number ) → ( K, V )-- A function to transform the index ) → {[K]: V}-- The new dictionary Converts an array into a dictionary using a given function to generate a new Key and Value.  "},{"title":"Weak​","type":1,"pageTitle":"TableUtil","url":"/RailUtil/api/TableUtil#Weak","content":"&lt;/&gt; TableUtil.Weak( tbl: T?,-- The table to make weak mode: string?-- The mode to use for the weak table ) → T&amp;tbl-- The weak table A simple wrapper for making a weak table. By default just the keys are made weak, but the second argument allows specifying the mode. "}]
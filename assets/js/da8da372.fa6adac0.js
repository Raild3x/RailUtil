"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[832],{27857:e=>{e.exports=JSON.parse('{"functions":[{"name":"isState","desc":"Checks if the arg is a Fusion StateObject.","params":[{"name":"arg:","desc":"The argument to check","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":62,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}}],"properties":[{"name":"0.2.0","desc":"[Util for Fusion 0.2.0]([0.2.0]%20FusionUtil)\\n```lua\\nlocal fUtil = RailUtil.Fusion[\\"0.2.0\\"]\\n```","lua_type":"table","source":{"line":60,"path":"src/RailUtil/FusionUtil/init.luau"}},{"name":"0.2.5","desc":"[Util for my forked version of Fusion 0.2.0]([0.2.5]%20FusionUtil)\\n```lua\\nlocal fUtil = RailUtil.Fusion[\\"0.2.5\\"]\\n```","lua_type":"table","source":{"line":69,"path":"src/RailUtil/FusionUtil/init.luau"}},{"name":"0.3.0","desc":"[Util for Fusion 0.3.0]([0.3.0]%20FusionUtil)\\n```lua\\nlocal fUtil = RailUtil.Fusion[\\"0.3.0\\"]\\n```","lua_type":"table","tags":["Latest Version"],"source":{"line":79,"path":"src/RailUtil/FusionUtil/init.luau"}}],"types":[{"name":"raw","desc":"A table of convenience functions for creating Fusion objects.\\nThese functions do not require the use of a scope, they by default use the FusionUtil scope.\\nThese are meant to be used in places where you want to create persistent Fusion objects without needing to pass a scope.","fields":[{"name":"Value<T>(value:","lua_type":"T): Value<T>","desc":""},{"name":"Computed<T>(fn:","lua_type":"(use: Use) -> T): Computed<T>","desc":""},{"name":"Observer(watching:","lua_type":"unknown): Observer","desc":""},{"name":"Spring<T>(value:","lua_type":"UsedAs<T>, speed: UsedAs<number>, damping: UsedAs<T>): Spring<T>","desc":""},{"name":"Tween<T>(goal:","lua_type":"UsedAs<T>, tweenInfo: UsedAs<TweenInfo>): Tween<T>","desc":""},{"name":"ForKeys<KI,","lua_type":"KO, V>(inputTable: UsedAs<{[KI]: V}>, processor: (use: Use, scope: FUS, key: KI) -> KO, destructor: unknown): For<KO, V>","desc":""},{"name":"ForValues<K,","lua_type":"VI, VO>(inputTable: UsedAs<{[K]: VI}>, processor: (use: Use, scope: FUS, value: VI) -> VO, destructor: unknown): For<K, VO>","desc":""},{"name":"ForPairs<KI,","lua_type":"VI, KO, VO>(inputTable: UsedAs<{[KI]: VI}>, processor: (use: Use, scope: FUS, key: KI, value: VI) -> {key: KO, value: VO}, destructor: unknown): For<KO, VO>","desc":""},{"name":"New(className:","lua_type":"string): (props: Props) -> Instance","desc":""},{"name":"Hydrate<T>(instance:","lua_type":"T & Instance): (props: Props) -> T","desc":""}],"source":{"line":86,"path":"src/RailUtil/FusionUtil/FusionUtil_v0_3_0.luau"}}],"name":"FusionUtil","desc":"**Current Latest FusionUtil Version:** [`0.3.0`]([0.3.0]%20FusionUtil)\\n\\n\\nInherits all the methods of the latest version of FusionUtil.","source":{"line":10,"path":"src/RailUtil/FusionUtil/init.luau"}}')}}]);